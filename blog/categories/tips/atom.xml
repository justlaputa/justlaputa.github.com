<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Coding in the Sky]]></title>
  <link href="http://laputa.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://laputa.io/"/>
  <updated>2015-09-21T21:12:38+09:00</updated>
  <id>http://laputa.io/</id>
  <author>
    <name><![CDATA[laputa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[So, Your Gitlab Is Slow?]]></title>
    <link href="http://laputa.io/blog/2015/09/15/so-your-gitlab-is-slow/"/>
    <updated>2015-09-15T22:00:55+09:00</updated>
    <id>http://laputa.io/blog/2015/09/15/so-your-gitlab-is-slow</id>
    <content type="html"><![CDATA[<p>Our develop team use Gitlab for a long time, recently I get into some performance issues while using it. In this post, I will share our problem and some tips to investigate and improve it.</p>

<!--more-->


<h3>Problems</h3>

<p>Our develop team has about 100 individual developers, mainly working on a single big repository(about 1GB). As Gitlab CE&rsquo;s <a href="http://doc.gitlab.com/ce/install/requirements.html#cpu">official document</a> suggests:</p>

<blockquote><p>2GB RAM is the recommended memory size and supports up to 100 users</p></blockquote>

<p>In the beginning of the project, we don&rsquo;t have so much developers, and source code is not so big. We used an EC2 <em>m3.large</em> instance(2 CPU, 7.5GB MEM), it was OK. But soon, as developers and source code size increase, we find that the Gitlab website sometimes can not response quickly, and our front Nginx returns <em>502 Bad Gateway</em>. We thought is was because our EC2 instance is not powerful enough, so we upgrade to <em>m3.xlarge</em>(4CPU, 15GB MEM), it was a quick solution and worked well for some time.</p>

<p>But it does not last long, as our project is preparing to go to release cycle, and every sprint has strict deadline. Our developers tend to submit a lot of merge requests near the date of development deadline. And at that time, our Gitlab server has big problem in handling the merge request page:</p>

<ul>
<li>When developer <strong>create</strong> Merge Request, the MR page would open and Gitlab start to <strong>checking merge request</strong>, this process cost long time and sometimes it just not response with the result</li>
<li>When developer <strong>accept</strong> Merge Request, Gitlab start the merge, and show a spinner, but it takes so long time(sometimes more than 30mins), and sometimes it just never stop</li>
</ul>


<p>Even though we try to upgrade to a more powerful EC2 instance, it still can not solve the problem. I started to investigate the problem from source code.</p>

<h3>How Gitlab handles Merge Request</h3>

<p>You can find Gitlab backend architecture from the <a href="http://doc.gitlab.com/ce/development/architecture.html#system-layout">official document</a>. The key part happens in <code>gitlab-satellites</code>.</p>

<p>If login to your Gitlab server, you can find two places which stores the git repository:</p>

<p><code>/home/git/repositories</code></p>

<p>this is where the real git repository is stored, which is called as the <code>bare repository</code></p>

<p><code>/home/git/gitlab-satellites</code></p>

<p>this is a clone of the real repository from above folder. And most git operation will be happen in this <strong>satellite</strong> folder.</p>

<h4>Check merge request</h4>

<p>First, let&rsquo;s see how does Gitlab check if a merge request is mergeable.</p>

<p>When new merge request is created, it will call this function in <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/controllers/projects/merge_requests_controller.rb#L140"><code>merge_request_controller.rb</code></a>:</p>

<pre><code class="ruby">def automerge_check
  if @merge_request.unchecked?
    @merge_request.check_if_can_be_merged
  end

  closes_issues

  render partial: "projects/merge_requests/widget/show.html.haml", layout: false
end
</code></pre>

<p>in <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/models/merge_request.rb#L207"><code>merge_request.rb</code></a></p>

<pre><code class="ruby">def check_if_can_be_merged
  if Gitlab::Satellite::MergeAction.new(self.author, self).can_be_merged?
    mark_as_mergeable
  else
    mark_as_unmergeable
  end
end
</code></pre>

<p>finally in <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/lib/gitlab/satellite/merge_action.rb#L13"><code>merge_action.rb</code></a>:</p>

<pre><code class="ruby">def can_be_merged?
  in_locked_and_timed_satellite do |merge_repo|
    prepare_satellite!(merge_repo)
    merge_in_satellite!(merge_repo)
  end
end

def merge_in_satellite!(repo, message = nil)
  update_satellite_source_and_target!(repo)

  message ||= "Merge branch '#{merge_request.source_branch}' into '#{merge_request.target_branch}'"

  # merge the source branch into the satellite
  # will raise CommandFailed when merge fails
  repo.git.merge(default_options({ no_ff: true }), "-m#{message}", "source/#{merge_request.source_branch}")
rescue Grit::Git::CommandFailed =&gt; ex
  handle_exception(ex)
end

# Assumes a satellite exists that is a fresh clone of the projects repo, prepares satellite for merges, diffs etc
def update_satellite_source_and_target!(repo)
  repo.remote_add('source', merge_request.source_project.repository.path_to_repo)
  repo.remote_fetch('source')
  repo.git.checkout(default_options({ b: true }), merge_request.target_branch, "origin/#{merge_request.target_branch}")
rescue Grit::Git::CommandFailed =&gt; ex
  handle_exception(ex)
end
</code></pre>

<p>As you can see. The final call is <code>merge_in_satellite!</code> method, which will run the <code>git merge</code> command in your git repository&rsquo;s satellite folder.</p>

<h4>Accept Merge Request</h4>

<p>When user click the <strong>Accept Merge Request</strong> button, here is what happens:</p>

<p>in <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/controllers/projects/merge_requests_controller.rb#L150"><code>merge_request_controller</code></a>, the <code>automerge</code> method will be called:</p>

<pre><code class="ruby">def automerge
  return access_denied! unless @merge_request.can_be_merged_by?(current_user)

  if @merge_request.automergeable?
    AutoMergeWorker.perform_async(@merge_request.id, current_user.id, params)
    @status = true
  else
    @status = false
  end
end
</code></pre>

<p>We can find that it use an worker to perform an async task, this is a <a href="http://sidekiq.org/">Sidekiq</a> task:</p>

<p><a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/workers/auto_merge_worker.rb#L6"><code>auto_merge_worker.rb</code></a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AutoMergeWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  sidekiq_options queue: :default&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">merge_request_id</span><span class="p">,</span> <span class="n">current_user_id</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">with_indifferent_access</span>
</span><span class='line'>    <span class="n">current_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">current_user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">merge_request</span> <span class="o">=</span> <span class="no">MergeRequest</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">merge_request_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">merge_request</span><span class="o">.</span><span class="n">should_remove_source_branch</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:should_remove_source_branch</span><span class="o">]</span>
</span><span class='line'>    <span class="n">merge_request</span><span class="o">.</span><span class="n">automerge!</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:commit_message</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>and it call the <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/models/merge_request.rb#L223"><code>merge_request.rb</code></a> <strong>auto_merge!</strong> method:</p>

<pre><code class="ruby">def automerge!(current_user, commit_message = nil)
  return unless automergeable?

  MergeRequests::AutoMergeService.
    new(target_project, current_user).
    execute(self, commit_message)
end
</code></pre>

<p>then it calls the <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/app/services/merge_requests/auto_merge_service.rb#L8"><code>auto_merge_service.rb</code></a> <strong>execute</strong> method:</p>

<pre><code class="ruby">def execute(merge_request, commit_message)
    merge_request.lock_mr

    if Gitlab::Satellite::MergeAction.new(current_user, merge_request).merge!(commit_message)
      merge_request.merge

      create_merge_event(merge_request, current_user)
      create_note(merge_request)
      notification_service.merge_mr(merge_request, current_user)
      execute_hooks(merge_request, 'merge')

      true
    else
      merge_request.unlock_mr
      false
    end
....
</code></pre>

<p>Here, it use the same <code>MergeAction</code> class, but called a different method:</p>

<pre><code class="ruby">def merge!(merge_commit_message = nil)
  in_locked_and_timed_satellite do |merge_repo|
    prepare_satellite!(merge_repo)
    if merge_in_satellite!(merge_repo, merge_commit_message)
      # push merge back to bare repo
      # will raise CommandFailed when push fails
      merge_repo.git.push(default_options, :origin, merge_request.target_branch)

      # remove source branch
      if merge_request.remove_source_branch?
        # will raise CommandFailed when push fails
        merge_repo.git.push(default_options, :origin, ":#{merge_request.source_branch}")
        merge_request.source_project.repository.expire_branch_names
      end
      # merge, push and branch removal successful
      true
    end
  end
rescue Grit::Git::CommandFailed =&gt; ex
  handle_exception(ex)
end
</code></pre>

<p>Now you see, the different of <code>Accept Merge Request</code> is that it will execute the git <code>push</code> command after it merge in the satellite folder, that is absolutely what <code>Accept</code> should do.</p>

<p>You may think that, the <strong>Accept</strong> process is asynchronous, <strong>Check</strong> is synchronous, so at least these two process can be done in parallel. But there is one more thing we should see, in both <code>can_be_merged?</code> and <code>merge!</code> methods, there is a <code>in_locked_and_timed_satellite</code> method, we can find the souce in <code>action.rb</code>, but the actual implementation is in <a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/lib/gitlab/satellite/satellite.rb#L59"><code>satellite.rb</code></a></p>

<pre><code class="ruby"># * Locks the satellite
# * Changes the current directory to the satellite's working dir
# * Yields
def lock
  project.ensure_satellite_exists

  File.open(lock_file, "w+") do |f|
    begin
      f.flock File::LOCK_EX
      yield
    ensure
      f.flock File::LOCK_UN
    end
  end
end
</code></pre>

<p>Whenever checking or accepting a merge request, it locks the satellite by <a href="http://ruby-doc.org/core-2.1.5/File.html#method-i-flock">lock</a> a file, and each satellite has a single lock file. So even the accept process is asynchronous by Sidekiq, but it has to wait for the file lock if some other check or accept process is running. This whole strategy make all <strong>check</strong> and <strong>accept</strong> process running in sequential order. So when you have many developers Create/Accept merge request at same time, all process will be running in sequential, and that&rsquo;s why you have to wait long time for your merge request.</p>

<h3>The git gc</h3>

<p>Besides all process is sequential, we found another problem that affects speed. I enable the git command log by edit this file:</p>

<p><a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/d321305c00f934db9becac1aa9726c3e9b400df5/config/initializers/3_grit_ext.rb"><code>config/initializers/3_grit_ext.rb</code></a>:</p>

<pre><code class="ruby">require 'grit'

Grit::Git.git_binary = Gitlab.config.git.bin_path
Grit::Git.git_timeout = Gitlab.config.git.timeout
Grit::Git.git_max_size = Gitlab.config.git.max_size
Grit::debug = true
</code></pre>

<p>Then the git command detail will be logged to log file <code>unicorn_stdout.log</code>, <code>sidekiq.log</code>. We can see what&rsquo;s going on when Gitlab check or accept merge request. After I check the log file, I found that after every git merge process, it tries to run git gc:</p>

<pre><code>Auto packing the repository for optimum performance. You may also
run "git gc" manually. See "git help gc" for more information.
warning: There are too many unreachable loose objects; run 'git prune' to remove them.
</code></pre>

<p>The reason is that, the satellite repository is used too often, and if you&rsquo;ve got a big repository, and around 100 developers working on it, it is very likely to make many loose objects, and in which case makes git think it should run <code>gc</code> to clean up. And <code>git gc</code> cost a lot of time, what&rsquo;s more, even it runs once, the next time git merge will still trigger the gc command. The reason is as the output says, we have too many loose objects in the git repository, one way to avoid this is run <code>git prune</code> with expire option:</p>

<pre><code class="bash">$ git prune --expire=now
</code></pre>

<p>You can write a cron task to run this command regularly to clean up your gitlab satellite, it would avoid the <code>gc</code> process and enhance the gitlab performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restore Ubuntu Grub2 After Install Windows]]></title>
    <link href="http://laputa.io/blog/2012/10/16/restore-ubuntu-grub2-after-install-windows/"/>
    <updated>2012-10-16T20:06:00+09:00</updated>
    <id>http://laputa.io/blog/2012/10/16/restore-ubuntu-grub2-after-install-windows</id>
    <content type="html"><![CDATA[<p>A two weeks ago, I have installed Windows 8 on my home desktop to replace Windows 7, and of cause I can not boot into Ubuntu 12.04 after that. Today I got my Ubuntu live USB stick back from one of my friend, so I try to restore grub2 in Ubuntu. Here is the work flow:</p>

<!--more-->


<p>Boot into the Ubuntu liveUSB, and choose <strong>Try Ubuntu</strong> instead of install it.</p>

<p>Open terminal, mount necessary device:</p>

<pre><code>$ sudo mount /dev/sdx /mnt
$ sudo mount --bind /dev /mnt/dev
$ sudo mount --bind /proc /mnt/proc
</code></pre>

<p><code>/dev/sdx</code> ==> replace <code>x</code> with the device where your old ubuntu lies in.</p>

<p>Then we can change root to the old ubuntu directory:</p>

<pre><code>$ sudo chroot /mnt
</code></pre>

<p>use <a href="http://www.gnu.org/software/grub/manual/html_node/Installing-GRUB-using-grub_002dinstall.html">grub-install</a> to reinstall grub2:</p>

<pre><code># grub-install --recheck /dev/sdx
Installation finished. No error reported.
</code></pre>

<p>Now we need to <strong>reboot</strong>, and now we can see the ubuntu grub boot window, and boot into Ubuntu</p>

<p>Open terminal, use <code>update-grub2</code> to detect your windows installation:</p>

<pre><code>$ sudo update-grub2
</code></pre>

<p>This will find the windows installation and add it to grub2 boot entry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tips&Tricks]]></title>
    <link href="http://laputa.io/blog/2012/08/26/emacs-tips-tricks/"/>
    <updated>2012-08-26T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/08/26/emacs-tips-tricks</id>
    <content type="html"><![CDATA[<!--more-->


<p>  delete ^M with emacs</p>

<pre><code>M-x replace-string &lt;RET&gt; C-q C-m &lt;RET&gt; &lt;RET&gt;
</code></pre>

<p>  save backup files elsewhere</p>

<pre><code>(defvar user-temporary-file-directory
  (concat temporary-file-directory user-login-name "/"))
(make-directory user-temporary-file-directory t)
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . ,user-temporary-file-directory)
        (,tramp-file-name-regexp nil)))
(setq auto-save-list-file-prefix
      (concat user-temporary-file-directory ".auto-saves-"))
(setq auto-save-file-name-transforms
      `((".*" ,user-temporary-file-directory t)))
</code></pre>

<p>  open file as root</p>

<p>  using tramp, see tramp manual</p>

<pre><code>C-x C-f /su::/etc/passwd
</code></pre>

<p>  replace with a newline</p>

<pre><code>M-x replace-string ; C-q C-j
</code></pre>

<p>  kill all buffers</p>

<pre><code>M-x kill-some-buffers
</code></pre>

<p>  save all buffers</p>

<pre><code>C-x s
</code></pre>

<p>  insert comment</p>

<p>  select region to comment:</p>

<pre><code> M-;
</code></pre>

<p>  <a href="http://www.cs.ucf.edu/~leavens/emacs/ecb/html-help/Setting-up-semantic.html">disable red underline</a></p>

<pre><code>(global-semantic-show-unmatched-syntax-mode -1)
</code></pre>

<p>  Swap caps lock &amp; ctrl</p>

<pre><code>$ vim ~/.Xmodmap
remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Caps_Lock
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
</code></pre>

<p>  insert date</p>

<pre><code>C-u M-! date
M-1 M-! date
</code></pre>

<p>  show whitespace</p>

<pre><code>M-x whitespace-mode
</code></pre>

<p>  keybord macros</p>

<pre><code>C-x (     -&gt;start macro
key sequence
C-x )     -&gt;stop macro
C-x e     -&gt;execute macro
C-u N C-x e -&gt; N times
</code></pre>

<p>  replace tabs with spaces</p>

<pre><code>M-x untabify
</code></pre>

<p>  vice versa:</p>

<pre><code>M-x tabify
</code></pre>

<p>  <a href="http://www.delorie.com/gnu/docs/emacs/emacs_68.html">multi-line edit</a></p>

<p>  mark a region then:</p>

<pre><code>C-x r t
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Org-mode Cheat Sheet]]></title>
    <link href="http://laputa.io/blog/2012/08/26/emacs-org-mode-cheat-sheet/"/>
    <updated>2012-08-26T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/08/26/emacs-org-mode-cheat-sheet</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Keybindings</h2>

<h3>General</h3>

<pre><code>| Visibility cycling    |                                                 |
| &lt;TAB&gt;                 | Rotate current subtree                          |
| S-&lt;TAB&gt; and C-u &lt;TAB&gt; | Rotate entire buffer                            |
| C-u C-u C-u &lt;TAB&gt;     | Show all                                        |
|-----------------------+-------------------------------------------------|
| Move between heading  |                                                 |
| C-c C-n               | Next heading                                    |
| C-c C-p               | Previous Heading                                |
| C-c C-f               | Next heading same level                         |
| C-c C-b               | Previous Heading same level                     |
| C-c C-u               | Backward to higher level heading                |
|-----------------------+-------------------------------------------------|
| Structure editing     |                                                 |
| M-&lt;RET&gt;               | Insert new heading with same level as current   |
| M-S-&lt;RET&gt;             | Insert new TODO entry                           |
| &lt;TAB&gt;                 | Cycle through levels in empty entry             |
| M-&lt;left&gt;/&lt;right&gt;      | Promote/demote current heading by one level     |
| M-S-&lt;left&gt;/&lt;right&gt;    | Promote/demote current subtree by one level     |
| M-S-&lt;up&gt;/&lt;down&gt;       | Move subtree up/down                            |
| C-c C-w               | Refile entry or region to different location    |
| C-x n s/w             | Narrow buffer to current subtree/widen it again |
|-----------------------+-------------------------------------------------|
| Sparse trees          |                                                 |
| C-c /                 |                                                 |
| C-c / r               |                                                 |
|-----------------------+-------------------------------------------------|
| Plain lists           |                                                 |
| '-' '+' '*'           | Unordered list                                  |
| '1.' '1)'             | Ordered list                                    |
| '::'                  | Description list                                |
| &lt;TAB&gt;                 | Fold items                                      |
| M-&lt;RET&gt;               | Insert new items                                |
| M-S-&lt;RET&gt;             | Insert new items with a checkbox                |
| M-S-&lt;up&gt;/&lt;down&gt;       | Move item up/down                               |
| M-&lt;left&gt;/&lt;right&gt;      | Decrease/increase indentation of item           |
| M-S-&lt;left&gt;/&lt;right&gt;    | Decrease/increase including subitems            |
| C-c C-c               | Toggle checkbox                                 |
| C-c -                 | Cycle item bullets('-','+','*','1.','1)')       |
|-----------------------+-------------------------------------------------|
| Footnotes             |                                                 |
| C-c C-x f             | Footnote action command                         |
| C-c C-c               | Jump between definition and reference           |
|-----------------------+-------------------------------------------------|
</code></pre>

<h3>Tables</h3>

<pre><code>| C-c |                        | convert and active region to table, create new table if no active region |
| C-c C-c                      | Re-align table without moveing the cursor                                |
| &lt;TAB&gt;                        | Re-align and move to next field                                          |
| S-&lt;TAB&gt;                      | Re-align and move to previous field                                      |
| &lt;RET&gt;                        | Re-align and move down to next row                                       |
|------------------------------+--------------------------------------------------------------------------|
| Column and row editing       |                                                                          |
| M-&lt;left&gt;/&lt;right&gt;             | Move current column left/right                                           |
| M-S-&lt;left&gt;                   | Kill current column                                                      |
| M-S-&lt;right&gt;                  | Insert new column to the left of cursor                                  |
| M-&lt;up&gt;/&lt;down&gt;                | Move current row up/down                                                 |
| M-S-&lt;up&gt;                     | Kill current row                                                         |
| M-S-&lt;down&gt;                   | Insert new row above current                                             |
| C-c -                        | Insert horizontal line below current                                     |
| C-c &lt;RET&gt;                    | Insert horizontal line below and move to it                              |
| C-c ^                        | Sort table lines                                                         |
</code></pre>

<h3>Hyperlinks</h3>

<pre><code>| C-c l   | Store a link                                |
| C-c C-l | Insert a link                               |
| C-c C-l | Edit links when cursor on the link          |
| C-c C-o | Open link                                   |
| C-c &amp;   | Jump back to recorded position(Using C-c %) |
</code></pre>

<h3>TODO Items</h3>

<pre><code>| C-c C-t          | Rotate TODO states               |
| S-&lt;right&gt;/&lt;left&gt; | Select following/preceding state |
| C-c / t          | View TODO items in sparse tree   |
| C-c a t          | Show global TODO list            |
| S-M-&lt;RET&gt;        | Insert new TODO entry            |
| C-c ,            | Set priority                     |
| S-&lt;up&gt;/&lt;down&gt;    | Increase/decrease priority       |
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse & Emacs]]></title>
    <link href="http://laputa.io/blog/2012/08/08/eclipse-emacs/"/>
    <updated>2012-08-08T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/08/08/eclipse-emacs</id>
    <content type="html"><![CDATA[<p>This post is about how I tweak Eclipse into a Emacs like IDE, and now I&rsquo;m very happy using Eclipse.</p>

<!--more-->


<h2>Emacs Key-bindings</h2>

<p>  I just got to know that Eclipse has a built in <a href="http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Fconcepts%2Faccessibility%2Fkeyboardshortcuts.htm">Emacs key-binding scheme</a>, just set it like this:</p>

<pre><code>Windows-&gt;Preference-&gt;General-&gt;Keys-&gt;Scheme-&gt;Emacs
</code></pre>

<p>  has most useful key-bindings, like <em>C-a</em>, <em>C-e</em>, <em>C-x C-s</em>, etc. But Set Mark does not work with <em>C-Space</em></p>

<h2>Emacs+ plugin for Eclipse</h2>

<p>  Install <a href="http://marketplace.eclipse.org/content/emacs">Emacs+</a> from Eclipse Marketplace, and see the tutorial on <a href="http://www.mulgasoft.com/">MulgaSoft</a>
  Note that Emacs+ does not support Eclipse Juno(4.2), so if you want to use Emacs+, you better change back to Indigo(3.7) like me&hellip;</p>

<p>  It&rsquo;s awesome, now Set Mark and Select Text works in Eclipse.</p>

<h2>Menu bar integration with Ubuntu Unity</h2>

<p>  This is amazing, just do as this <a href="http://elvisd.blogspot.hk/2012/01/enable-eclipse-global-menu-integration.html">blog post</a> says, and you can move the eclipse menu bar to Ubuntu global menu area.</p>

<pre><code>$ sudo vim /usr/lib/gtk-2.0/2.10.0/menuproxies/libappmenu.so
/Eclipse
# Replace 'E' with 'X'
Eclipse -&gt; Xclipse
# Save &amp;&amp; Exit
$ sudo ldconfig
</code></pre>
]]></content>
  </entry>
  
</feed>
