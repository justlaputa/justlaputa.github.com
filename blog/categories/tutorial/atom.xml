<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Coding in the Sky]]></title>
  <link href="http://laputa.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://laputa.io/"/>
  <updated>2014-10-24T12:02:48+09:00</updated>
  <id>http://laputa.io/</id>
  <author>
    <name><![CDATA[laputa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blog URL changed]]></title>
    <link href="http://laputa.io/blog/2013/05/14/blog-url-changed/"/>
    <updated>2013-05-14T22:40:00+09:00</updated>
    <id>http://laputa.io/blog/2013/05/14/blog-url-changed</id>
    <content type="html"><![CDATA[<p>今天我终于把2年半前注册的域名 <a href="http://justlaputa.com">justlaputa.com</a> 成功重定向到 Github pages 了。</p>

<p>之前试过 DNS forward，但是URL不能完美显示，今天无意中想找找有没有好办法把域名重定向到 Github，意料之外找到了Github 的官方配置方法 <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>，居然成功了！</p>

<!--more-->


<p>完全按照教程来就OK了：</p>

<ol>
<li>在github pages repository下面新建一个文件 <a href="https://github.com/justlaputa/justlaputa.github.com/blob/master/CNAME">CNAME</a>，里面写上想要map的域名，这个文件会告诉github pages把 <code>*.github.io</code> 重定向到自己的域名（try <a href="http://justlaputa.github.io">justlaputa.github.io</a>）</li>
<li>修改域名的<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">A record</a> 为 github pages service ip：<code>204.232.175.78</code></li>
</ol>


<p>然后等待DNS修改生效就OK了！</p>

<p>Awesome Github!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test MediaElement.js locally]]></title>
    <link href="http://laputa.io/blog/2013/03/05/test-mediaelement-dot-js-locally/"/>
    <updated>2013-03-05T20:21:00+09:00</updated>
    <id>http://laputa.io/blog/2013/03/05/test-mediaelement-dot-js-locally</id>
    <content type="html"><![CDATA[<p>Today I was trying to use <a href="http://mediaelementjs.com/">mediaelement.js</a> to play mp3 audio in browsers. I thought it was easy, but still I&rsquo;ve met problems, mainly with <a href="https://www.mozilla.org/en-US/firefox/">Firefox</a>.</p>

<!--more-->


<p>First, I want to use static local html file to test the library, which is fast to do. Here is the code:</p>

<p>```
$ tree mejs
mejs
├── css
│   ├── background.png
│   ├── bigplay.png
│   ├── bigplay.svg
│   ├── controls-ted.png
│   ├── controls-wmp-bg.png
│   ├── controls-wmp.png
│   ├── controls.png
│   ├── controls.svg
│   ├── loading.gif
│   └── mediaelementplayer.css
├── index.html
├── js
│   ├── app.js
│   ├── flashmediaelement.swf
│   ├── jquery.js
│   └── mediaelement-and-player.js
└── media</p>

<pre><code>└── music.mp3
</code></pre>

<p>3 directories, 16 files
```</p>

<p><strong>index.html</strong> :</p>

<p>```
&lt;!doctype html>
<html>
<head></p>

<pre><code>&lt;link type="text/css" rel="stylesheet" href="css/mediaelementplayer.css" /&gt;
&lt;script src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script src="js/mediaelement-and-player.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;audio type="audio/mp3" src="media/music.mp3" controls&gt;&lt;/audio&gt;
&lt;script src="js/app.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p><strong>app.js</strong> :</p>

<p>```
$(function() {</p>

<pre><code>$('audio').mediaelementplayer();
</code></pre>

<p>});
```</p>

<p>As firefox does not support <a href="https://developer.mozilla.org/en-US/docs/HTML/Supported_media_formats#compat-desktop">MP3 format</a>, if we don&rsquo;t include the <code>app.js</code> file to use mediaelement.js, the browser will not show the audio bar, and gives an error in js console:</p>

<blockquote><p>HTTP &ldquo;Content-Type&rdquo; of &ldquo;audio/mpeg&rdquo; is not supported. Load of media resource file:///Users/hanxiao/workspace/test/mejs/media/music.mp3 failed. @ file:///Users/hanxiao/workspace/test/mejs/index.html</p></blockquote>

<p>So we include <code>app.js</code> and call <code>mediaelementplayer()</code> function to let mediaelement.js use the flash fallback to play mp3 in firefox. But problems happens here, the audio bar shows, but no control icon, and the audio can not play.</p>

<p>The reason is that flash plugin has <a href="https://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html#117502">security control</a>, which prevents flash plugin to access the local mp3 file. To allow this, open a flash video site like <a href="https://www.youtube.com/">youtube</a> or <a href="http://www.youku.com/">youku</a> if you can&rsquo;t. Open one video page, and wait the video to play, not we have a running flash plugin, right click on it and choose <strong>Global Settings…->Advanced->Trusted Location Settings…</strong> add the directory of the local site to it, then open <code>index.html</code> in firefox, now the mp3 plays like a charm.</p>

<p>Something intresting: though firefox declares not support mp3, but when I open the mp3 file directly in firefox, it plays well, and the inspector show this code:</p>

<p><code>
&lt;embed type="audio/mpeg" src="file:///Users/hanxiao/workspace/test/mejs/media/music.mp3" name="plugin" height="100%" width="100%"&gt;
</code></p>

<p>Do you know why? Please comment if you do, cause currently I don&rsquo;t..</p>

<p>Update: Created a <a href="git@github.com:justlaputa/mejs-test.git">github repo</a> about this code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running multiple instance of firefox]]></title>
    <link href="http://laputa.io/blog/2012/09/13/running-multiple-instance-of-firefox/"/>
    <updated>2012-09-13T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/09/13/running-multiple-instance-of-firefox</id>
    <content type="html"><![CDATA[<p>  I&rsquo;m doing web development nowadays, using <a href="http://www.mozilla.org/en-US/firefox">Firefox</a>, still my favorite browser and develop platform, though I will also use <a href="http://www.google.com/chrome">Chrome</a> some time.</p>

<!--more-->


<p>  As you may know that firefox does not allow multiple instance to run at the same time, which means if you try to open firefox again(with desktop shortcut or command line) when you already is running one, it will give a message saying:</p>

<blockquote><p>A copy of Firefox is already open. Only one copy of Firefox can be open at a time.</p></blockquote>

<p>  A very long time before, I had wanted to run multiple fireboxes at the same time, but no lucky. Until yesterday I read a <a href="http://www.callum-macdonald.com/about/faq/multiple-firefox-instances/">blog post</a> in my <a href="www.google.com/reader">google reader</a>, I see this feature again. And what&rsquo;s lucky that I decide to try it. What I get is more than I wanted.</p>

<p>  So, here is how to do it:</p>

<p>  First, we need to know something about firefox&rsquo;s command line options(running on Mac OSX with ff 15.0.1):</p>

<pre><code>$ firefox --help
Firefox options
-h or -help        Print this message.
-v or -version     Print Firefox version.
-P &lt;profile&gt;       Start with &lt;profile&gt;.
-migration         Start with migration wizard.
-ProfileManager    Start with ProfileManager.
-no-remote         Do not accept or send remote commands; implies -new-instance.
-new-instance      Open new instance, not a new window in running instance.
-UILocale &lt;locale&gt; Start with &lt;locale&gt; resources as UI Locale.
-safe-mode         Disables extensions and themes for this session.
-jsconsole         Open the Error console.
-browser           Open a browser window.
-new-window  &lt;url&gt; Open &lt;url&gt; in a new window.
-new-tab     &lt;url&gt; Open &lt;url&gt; in a new tab.
-preferences       Open Preferences dialog.
-search     &lt;term&gt; Search &lt;term&gt; with your default search engine.
-private           Enable private browsing mode.
-private-toggle    Toggle private browsing mode.
-setDefaultBrowser Set this app as the default browser.
</code></pre>

<p> but today we only need this three:</p>

<ul>
<li><p>-no-remote<br/>
Enables <a href="http://kb.mozillazine.org/Opening_a_new_instance_of_your_Mozilla_application_with_another_profile">running multiple instances of the application with different profiles</a>; used with -P</p></li>
<li><p>-ProfileManager<br/>
Starts with Profile Manager.</p></li>
<li><p>-P &ldquo;&lt;profile name>"<br/>
Starts with a given profile name (profile name is case sensitive).</p></li>
</ul>


<p>first running firefox with <code>-ProfileManager</code>, let&rsquo;s create a separate profile:</p>

<pre><code>$ firefox -ProfileManager
</code></pre>

<p>this will open a dialog to let us create/delete/rename profiles, just create a new one, and name it. like <code>develop</code>.</p>

<p>  Then run firefox normally, like we always did after open the computer. Now firefox is running with the default profile, and if we open it again, it will give the normal <code>Only one instance</code> warning. Let&rsquo;s do it in command line way:</p>

<pre><code>$ firefox -no-remote -P "develop"
</code></pre>

<p>  Da da!! Now we have two firefox, in <em><strong>separate instance</strong></em>. Which also means <strong>double memory use..</strong></p>

<p>  You may ask, what&rsquo;s the point? Why we need two instance of firefox? Two make two cups of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=46647">coffee</a>? Well, let me tell you what this is worth a blog post.</p>

<p>  The point is not only another instance of firefox, but also a separate <strong>Profile</strong>. As I use firefox every day and keep it open from opening the computer till leaving office. I use it to read mails, review code, check new issues, search google, etc. And also, I use it to develop, test website, open firebug, debug javascript, etc. Currently I am doing this all in a single firefox window, and some times firebug makes my FF very slow, it influence my other work.</p>

<p>  Now, with this profile manager, I can make a new clean profile, with only develop add-ons installed, and open another firefox instance, only use it to do web development, doesn&rsquo;t this sounds awesome?! What&rsquo;s more, we can set up shortcuts for this <em>clean development</em> firefox instance, and open it in another workspace, without influence my daily web works. I will do this in my <a href="http://awesome.naquadah.org/">awesome</a> configuration file of Ubuntu 12.04 after I go to office tomorrow. It will be interesting, and later I will try <a href="www.mozilla.org/en-US/firefox/aurora/">Firefox 17</a>&rsquo;s new <a href="https://hacks.mozilla.org/2012/09/html-editing-and-other-improvements-in-firefox-17-developer-tools/">web development tools</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Awesome in Ubuntu 12.04]]></title>
    <link href="http://laputa.io/blog/2012/09/02/using-awesome-in-ubuntu-12.04/"/>
    <updated>2012-09-02T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/09/02/using-awesome-in-ubuntu-12.04</id>
    <content type="html"><![CDATA[<p>I have used <a href="http://www.ubuntu.com/">Ubuntu</a> <a href="http://releases.ubuntu.com/12.04/">12.04</a> for about 1.5 months, and now I&rsquo;m very happy to use it, as I started Linux by <a href="http://fedoraproject.org/">Fedora</a>, and tried many other major <a href="http://distrowatch.com/">distributions</a>, my last distribution was <a href="http://www.gentoo.org/">Gentoo</a>, and I like it very much, still now. After I graduate from school and start my first job, I&rsquo;m very glad that my employer does not care what OS I use, so I can continue using Linux, and this time I choose to try Ubuntu, which I have not used too much before.</p>

<!--more-->


<p>Till now, I have used it for nearly two month, and I&rsquo;m happy now. It is simple, <a href="http://unity.ubuntu.com/">Unity</a> is well designed, and it does not influence my work experience, I like it. Of cause I did some <a href="http://justlaputa.github.com/2012/07/install-ubuntu-en.html">tweak to Ubuntu</a> to fit my habit, like disable some keybindings.</p>

<p>But recently, I started to miss one thing, which is the <a href="http://awesome.naquadah.org/">awesome</a> window manager, I miss the <strong><code>Win + n</code></strong> workspace switch shortcut, and I miss it so much. Especially after I have buy a <a href="http://justlaputa.github.com/2012/08/buy-hhkb.html">HHKB</a> lately, and I have to press 4 keys(<strong><code>Fn + Ctrl + Alt + Arrow</code></strong>) to switch workspace in Ubuntu Unity, though I have practiced my finger, but I miss awesome so much and plan to use it in ubuntu. And luckily it is easy.</p>

<p>Here is my experience about install and config awesome in <strong>Ubuntu 12.04</strong>.</p>

<h2>install awesome</h2>

<p>awesome is already in Ubuntu&rsquo;s package source, install it by apt-get:</p>

<pre><code>$ sudo apt-get install awesome
</code></pre>

<p>so it is easy, isn&rsquo;t it? Let&rsquo;s try it.</p>

<p>logout from ubuntu, and you will get to the <a href="http://wiki.freedesktop.org/wiki/Software/LightDM">lightdm</a> login screen, and click the cycle icon besides your use name, a ha, we get a list of all available sessions to login, and of cause awesome is in the list. So choose <strong>awesome</strong> as the session, and type your password to login. Now you can see the awesome windows manager, yes, it&rsquo;s cool.</p>

<p>But wait, let do some config to get it more beautiful.</p>

<h2>config awesome</h2>

<p>There are many config examples in <a href="http://awesome.naquadah.org/wiki/User_Configuration_Files">awesome wiki</a>, and currently I&rsquo;m using the <a href="http://awesome.naquadah.org/wiki/Vicious">vicious</a> configuration files, you can get it from it&rsquo;s <a href="http://git.sysphere.org/">git repo</a>.</p>

<pre><code>$ cd ~/src
$ git clone http://git.sysphere.org/awesome-configs
$ git clone http://git.sysphere.org/vicious
$ cp -r awesome-configs ~/.config/awesome
$ cp -r vicious ~/.config/awesome/
</code></pre>

<p>Now we have set the config files, lets reload awesome to see it. <strong>Right click</strong> no the desktop, choose <em>restart</em> to let awesome reload the configuration files. Da da, now we are really in awesome. All the configuration is write in <code>~/.config/awesome/rc.lua</code>, and we can see all the key shortcut in it.</p>

<h2>tweak Ubuntu</h2>

<p>We are not done yet, though we have a beautiful WM to use now, but there are still something we need to do.</p>

<h3>disable desktop background</h3>

<p>Try to open <a href="https://live.gnome.org/Nautilus">Nautilus</a> by pressing <strong><code>Alt + F2</code></strong>, you will see the Ubuntu desktop background show up, and the top task bar is gone, so we need to fix this first.</p>

<p>Install <a href="https://live.gnome.org/GnomeTweakTool">Gnome-tweak-tool</a>:</p>

<pre><code>$ sudo apt-get install gnome-tweak-tool
</code></pre>

<p>and open it, disable <strong><code>Desktop-&gt;Have file manager handle the desktop</code></strong>, now restart awesome, this time open <strong>Nautilus</strong> is ok.</p>

<h3>auto start gnome-session</h3>

<p>We need to use some gnome service in awesome, like <a href="http://projects.gnome.org/NetworkManager/">Network Manager</a> and <a href="https://live.gnome.org/GnomeKeyring">Gnome keyring</a>, so let&rsquo;s add it to awesome&rsquo;s init file:</p>

<pre><code>$ vim ~/.config/awesome/rc.lua
# add to bottom
exec("gnome-keyring-daemon --daemonize --login")
exec("gnome-session --session=ubuntu")
</code></pre>

<p>How do I know this? Re-choose <strong>Ubuntu</strong> session when you login, and using <a href="http://htop.sourceforge.net/">htop</a> to see process tree, you will see what&rsquo;s running behind a gnome session, choose the one you like and add it to <code>rc.lua</code>.</p>

<h3>fix the maximize problem</h3>

<p>Some program(like gnome-terminal) can not be really maximized when pressing <strong><code>Win + m</code></strong>, add this to <code>rc.lua</code> will fix this:</p>

<pre><code>size_hints_honor = false
</code></pre>

<h2>Finally</h2>

<p>I&rsquo;m having fun now. I&rsquo;ll add more tips if I find something cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探Gstreamer SDK]]></title>
    <link href="http://laputa.io/blog/2012/07/10/try-gstreamer-sdk/"/>
    <updated>2012-07-10T00:00:00+09:00</updated>
    <id>http://laputa.io/blog/2012/07/10/try-gstreamer-sdk</id>
    <content type="html"><![CDATA[<p><a href="http://gstreamer.com/">Gstreamer SDK</a> 已经发布一段时间了，一直苦于没有Linux机器，也就没有尝试。现在有机会了，于是就跟着<a href="http://docs.gstreamer.com/display/GstSDK/Tutorials">官方教程</a>来试试。</p>

<p>这里只介绍在Fedora Linux下如何安装以及使用Gstreamer SDK，其他发行版可以根据教程来，应该大同小异。</p>

<!--more-->


<h2>安装SDK</h2>

<p>首先把gstreamer的repo下载并放到yum的repo.d 文件夹中，然后就能安装 sdk 了：</p>

<pre><code>$ wget http://www.freedesktop.org/software/gstreamer-sdk/data/packages/2012.5/fedora/gstreamer-sdk.repo
$ sudo cp gstreamer-sdk.repo /etc/yum.repo.d/
$ sudo yum install gstreamer-sdk-devel
</code></pre>

<p>gstreamer 的 sdk 会被安装在 /opt/gstreamer-sdk 下，我们可以简单看看 sdk 帮我们安装了哪些东西。在 /opt/gstreamer-sdk 目录下，基本是一个完整的编译环境：</p>

<pre><code>$ ls /opt/gstreamer-sdk
bin/  etc/  include/  lib/  libexec/  share/
</code></pre>

<p><strong>bin</strong> 下面是一些帮助程序，包括了常用的 <em>gst-inspect</em> 和 <em>gst-launch</em>。<strong>include</strong> 目录下包含了编译 gstremer 程序所需要的头文件，包括 <em>gtk</em>, <em>glib</em>, 甚至很多解码库的头文件也有，比如 <em>FLAC</em>, <em>speex</em> 等，而 <strong>lib</strong> 目录下包含了众多静态和动态库文件也是可想而知的了。可见　SDK 只是提供了编译时的依赖，使得　gstreamer 程序能够顺利编译通过。</p>

<h2>编译示例代码</h2>

<p>sdk 中已经包括了一些示例源代码，将/opt/gstreamer-sdk/share/gst-sdk/tutorials 复制到工作目录，或者直接从官方的 git 仓库　clone　一个：</p>

<pre><code>$ git clone git://anongit.freedesktop.org/gstreamer-sdk/gst-sdk-tutorials
</code></pre>

<p>进入到工作目录，根据教程的指示，在编译之前需要运行　sdk　提供的一个脚本配置好编译环境：</p>

<pre><code>$ cd ~/workspace/gst-sdk/tutorials
$ /opt/gstreamer-sdk/bin/gst-sdk-shell
</code></pre>

<p>我们可以简单看看这个　shell　脚本做了什么：</p>

<pre><code>#!/bin/sh

export XDG_CONFIG_DIRS="/opt/gstreamer-sdk/etc/xdg${XDG_CONFIG_DIRS:+:$XDG_CONFIG_DIRS}:/etc/xdg"
export LDFLAGS="-L/opt/gstreamer-sdk/lib ${LDFLAGS}"
export XDG_DATA_DIRS="/opt/gstreamer-sdk/share${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}:/usr/local/share:/usr/share"
export PYTHONPATH="/opt/gstreamer-sdk/lib/python2.7/site-packages${PYTHONPATH:+:$PYTHONPATH}"
export GIO_EXTRA_MODULES="/opt/gstreamer-sdk/lib/gio/modules"
export CXXFLAGS="-I/opt/gstreamer-sdk/include ${CXXFLAGS}"
export GST_PLUGIN_SCANNER="/opt/gstreamer-sdk/libexec/gstreamer-0.10/gst-plugin-scanner"
export CFLAGS="-I/opt/gstreamer-sdk/include ${CFLAGS}"
export PKG_CONFIG_PATH="/opt/gstreamer-sdk/lib/pkgconfig:/opt/gstreamer-sdk/share/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
export PATH="/opt/gstreamer-sdk/bin${PATH:+:$PATH}:/usr/local/bin:/usr/bin:/bin"
export GST_REGISTRY="${HOME}/.gstreamer-0.10/gstreamer-sdk-registry"
export LD_LIBRARY_PATH="/opt/gstreamer-sdk/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"


$SHELL "$@"
</code></pre>

<p>可以看到这个 shell　帮我们设置了很多环境变量，而这些环境变量几乎都是跟编译有关的，比较重要的几个是　<em>LDFLAGS</em>, <em>CXXFLAGS</em>, <em>CFLAGS</em>, <em>PATH</em>, 他们都把　/opt/gstreamer-sdk 下的相应目录添加到了这些变量中，为的就是在编译源码时能够引用到这些文件。</p>

<p>运行完这个脚本后，就可以开始编译示例代码了</p>

<pre><code>$ gcc basic-tutorial-1.c -o basic-tutorial-1 `pkg-config --cflags --libs gstreamer-0.10`
</code></pre>

<p>可以看看后面的　pkg-config 命令得到的是哪些参数：</p>

<pre><code>$ pkg-config --cflags --libs gstreamer-0.10
-pthread -I/opt/gstreamer-sdk/include/gstreamer-0.10 -I/opt/gstreamer-sdk/include/glib-2.0 -I/opt/gstreamer-sdk/lib/glib-2.0/include -I/opt/gstreamer-sdk/include/libxml2  -pthread -L/opt/gstreamer-sdk/lib -lgstreamer-0.10 -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lxml2 -lglib-2.0
</code></pre>

<p>记得上面的　gst-sdk-shell 脚本中设置了　<em>PKG_CONFIG_PATH</em> 这个变量，于是这里在运行　pkg-config 命令的时候，也是使用的 sdk 目录下的　pkgconfig 文件。现在我们可以试着运行编译出的程序:</p>

<pre><code>$ ./basic-tutorial-1

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_element_set_state: assertion `GST_IS_ELEMENT (element)' failed

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_element_get_bus: assertion `GST_IS_ELEMENT (element)' failed

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_bus_timed_pop_filtered: assertion `GST_IS_BUS (bus)' failed

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_object_unref: assertion `object != NULL' failed

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_element_set_state: assertion `GST_IS_ELEMENT (element)' failed

(basic-tutorial-1:2928): GStreamer-CRITICAL **: gst_object_unref: assertion `object != NULL' failed
</code></pre>

<p>发现并不能运行，原因是当前我们在 sdk-shell 所设置的环境中，而这个环境已经改变了　<em>LD_LIBRARY_PATH</em> 的值，在运行 basic-tutorial-1 的时候，gstreamer 会在 LD_LIBRARY_PATH 指定的目录中寻找所有插件的动态库，我们在这里可以尝试运行　gst-inspect:</p>

<pre><code>$ echo $LD_LIBRARY_PATH
/opt/gstreamer-sdk/lib
$ gst-inspect | less
</code></pre>

<p>可以发现在其中是找不到　<em>playbin2</em> 的，原因就是因为　sdk 的　lib 目录中没有　libgstplaybin.so　这个动态库。切换到另一个没有运行过 gst-sdk-shell　的终端，或者直接退出重新开终端，试着运行一下　basic-tutorial-1　这个程序，如果你的系统安装了　gstreamer　的话，这个程序应该是能跑起来的。</p>

<p>这时我们可以充分体会　sdk 只是提供了编译环境，而非运行环境了。实际上，只要你的系统安装了 gstreamer-devel，不需要运行上述的 sdk-shell　也能编译，并且能直接运行编译好的程序，但是这依赖于系统安装了 gstreamer　的编译以及运行环境，这也是以前开发gstreamer　应用的方式。sdk 的好处在于便于分发，以及统一跨平台的开发，类似　android 的开发环境，保证编译通过就能扔到手机上跑，所以还是很期待　gstreamer sdk　出　android 版本的。</p>
]]></content>
  </entry>
  
</feed>
